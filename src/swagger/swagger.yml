openapi: 3.0.0
info:
  title: Learning Management System (LMS) Docs
  version: 1.0.0
  description: API documentation for the Learning Management System (LMS) Backend Group 1

servers:
  - url: http://localhost:4000/api/lms
  - url: https://lms-backend-vb2k.onrender.com/api/lms

components:
 securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
 schemas:
    User:
      type: object
      properties:
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: password123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        role:
          type: string
          enum: [student, teacher, admin]
          example: student
        isVerified:
          type: boolean
          example: false
        verificationCode:
          type: string
          example: ABC123
        createdAt:
          type: string
          format: date-time
          example: 2025-03-26T12:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-03-26T12:00:00.000Z
      required:
        - email
        - password
        - firstName
        - lastName
    
    Course:
      type: object
      properties:
        courseCode:
          type: string
          example: CSC 101
        title:
          type: string
          example: Introduction to Programming
        description:
          type: string
          example: Learn the basics of programming.
        teacher:
          type: string
          example: 605c72f65b3c4e1a88d9f123
        students:
          type: array
          items:
            type: string
            example: 605c72f65b3c4e1a88d9f456
        createdAt:
          type: string
          format: date-time
          example: 2025-03-26T12:00:00.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-03-26T12:00:00.000Z
      required:
        - courseCode
        - title
        - teacher

paths:
  /user/signup:
    post:
      tags:
        - User
      summary: User Signup Endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Signed Up Successfully. Check your email for verification code.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "409":
          description: User already exists
  /user/verify-account:
    post:
      tags:
        - User
      summary: Verify User Account Endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: test@example.com
                verificationCode:
                  type: string
                  example: ABC123
      responses:
        "200":
          description: Account Verified Successfully
        "400":
          description: Invalid input
        "404":
          description: User not found
        "409":
          description: User already verified
  /user/signin:
    post:
      tags:
        - User
      summary: User Login Endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: test@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        "200":
          description: Logged In Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
  /user/resend-verification-code:
    post:
      tags:
        - User
      summary: Resend Verification Code Endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: test@example.com

      responses:
        "200":
          description: Verification Code Resent Successfully
        "400":
          description: Invalid input
        "404":
          description: User not found
        "409":
          description: User already verified

  /user/forgot-password:
    post:
      tags:
        - User
      summary: Forgot Password Endpoint
      description: Allows a user to request a password reset. A reset token will be sent to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: test@example.com
              required:
                - email
      responses:
        "200":
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset email sent successfully.
        "400":
          description: Invalid input
        "404":
          description: User not found
        "500":
          description: Server error

  /user/reset-password/{token}:
    post:
      tags:
        - User
      summary: Reset Password Endpoint
      description: Allows a user to reset their password using a valid reset token.
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: The reset token sent to the user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  format: password
                  example: newpassword123
                confirmPassword:
                  type: string
                  format: password
                  example: newpassword123
              required:
                - newPassword
                - confirmPassword
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successfully.
        "400":
          description: Invalid input or token expired
        "404":
          description: User not found
        "500":
          description: Server error

  /user/update/{id}:
    put:
      tags:
        - User
      summary: Update User Endpoint
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      security:
        - bearerAuth: [] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User Updated Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "404":
          description: User not found

  /courses/{courseCode}/enroll:
    post:
      tags:
        - Course
      summary: Student Enroll in a Course Endpoint
      parameters:
        - name: courseCode
          in: path
          required: true
          schema:
            type: string
          description: Course Code
      security:
        - bearerAuth: [] 
      responses:
        "200":
          description: Enrolled in Course Successfully
        "400":
          description: Invalid input
        "404":
          description: Course not found
        "409":
          description: Already enrolled in course

  /courses:
    post:
      tags:
        - Course
      summary: Create Course Endpoint
      description: Allows a teacher or admin to create a new course.
      security:
        - bearerAuth: [] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        "201":
          description: Course Created Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "409":
          description: Course already exists
  /courses/:
    get:
      tags:
        - Course
      summary: Get All Courses
      description: Fetch all courses. Only teachers or admins can access this endpoint.
      security:
        - bearerAuth: [] 
      responses:
        "200":
          description: Courses fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
        "401":
          description: Unauthorized
        "500":
          description: Server error
    
  /courses/{courseCode}:
    put:
      tags:
        - Course
      summary: Update Course Endpoint
      description: Allows a teacher or admin to update an existing course.
      parameters:
        - name: courseCode
          in: path
          required: true
          schema:
            type: string
          description: The unique code of the course to update.
      security:
        - bearerAuth: [] # Require Bearer Token for this endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Updated Course Title
                description:
                  type: string
                  example: Updated course description.
                teacher:
                  type: string
                  example: 605c72f65b3c4e1a88d9f123
      responses:
        "200":
          description: Course Updated Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: Course not found

  /courses/{courseCode}/soft-delete:
    patch:
      tags:
        - Course
      summary: Soft Delete Course Endpoint
      description: Allows a teacher or admin to soft delete a course (mark it as inactive).
      parameters:
        - name: courseCode
          in: path
          required: true
          schema:
            type: string
          description: The unique code of the course to soft delete.
      security:
        - bearerAuth: [] # Require Bearer Token for this endpoint
      responses:
        "200":
          description: Course Soft Deleted Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course soft deleted successfully.
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: Course not found

  /courses/{courseCode}/delete:
      delete:
        tags:
        - Course
      summary: Delete Course Endpoint
      description: Allows an admin to permanently delete a course.
      parameters:
        - name: courseCode
          in: path
          required: true
          schema:
            type: string
          description: The unique code of the course to delete.
      security:
        - bearerAuth: [] 
      responses:
        "200":
          description: Course Deleted Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Course deleted successfully.
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: Course not found
      
  /admin/get-users:
    get:
      tags:
        - Admin
      summary: Get All Users
      description: Allows an admin to fetch all users with optional search and pagination.
      security:
        - bearerAuth: [] 
      parameters:
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search users by name, email, or role.
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 1
          description: Page number for pagination.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 10
          description: Number of users per page.
      responses:
        "200":
          description: Users fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                    example: 100
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized

  /admin/delete-user/{id}:
    delete:
      tags:
        - Admin
      summary: Delete User
      description: Allows an admin to delete a user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the user to delete.
      security:
        - bearerAuth: [] # Require Bearer Token for this endpoint
      responses:
        "200":
          description: User Deleted Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully.
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: User not found

  /admin/assign-role:
    patch:
      tags:
        - Admin
      summary: Assign Role to User
      description: Allows an admin to assign a role to a user.
      security:
        - bearerAuth: [] 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 605c72f65b3c4e1a88d9f123
                role:
                  type: string
                  enum: [student, teacher, admin]
                  example: teacher
      responses:
        "200":
          description: Role Assigned Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Role assigned successfully.
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: User not found

  /assignment:
    post:
      tags:
        - Assignment
      summary: Create Assignment Endpoint
      description: Allows a teacher to create a new assignment for a course.
      security:
        - bearerAuth: [] # Require Bearer Token for this endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Assignment 1
                description:
                  type: string
                  example: Complete the exercises in Chapter 3.
                dueDate:
                  type: string
                  format: date
                  example: 2025-03-30
                course:
                  type: string
                  example: 605c72f65b3c4e1a88d9f123
              required:
                - title
                - description
                - dueDate
                - course
      responses:
        "201":
          description: Assignment Created Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Assignment created successfully.
                  assignment:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 605c72f65b3c4e1a88d9f456
                      title:
                        type: string
                        example: Assignment 1
                      description:
                        type: string
                        example: Complete the exercises in Chapter 3.
                      dueDate:
                        type: string
                        format: date
                        example: 2025-03-30
                      course:
                        type: string
                        example: 605c72f65b3c4e1a88d9f123
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "403":
          description: Only teachers can create assignments
        "404":
          description: Course not found